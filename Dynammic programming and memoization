Dynamic Programming 
As we can see, for larger Fibonacci numbers, the same sequence is being calculated repeatedly. This inefficiency is also visible in the Fibonacci tree, where the same branches appear again and again. To address this, we can use Dynamic Programming (DP) to optimize our approach.
What is Dynamic Programming? Dynamic Programming is a problem-solving technique used to solve problems that can be broken down into smaller, overlapping subproblems. The key idea behind DP is to avoid redundant work by storing the results of already solved subproblems and reusing these results in subsequent computations. This significantly improves efficiency.
We can also observe in the Fibonacci tree that the same branches appear multiple times. Instead of recalculating these branches each time, we can store these values and reuse them when needed. This technique is called Memoization. In Memoization, we save the results of function calls that are repeated and use them directly when we encounter the same subproblem again, thus eliminating unnecessary recalculations.
